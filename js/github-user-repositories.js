!function(e,r){if("function"==typeof define&&define.amd)define(["exports"],r);else if("undefined"!=typeof exports)r(exports);else{var t={exports:{}};r(t.exports),e.githubUserRepositories=t.exports}}(this,function(e){!function(r,t){if("function"==typeof define&&define.amd)define([],t);else if("undefined"!=typeof e)t();else{var n={exports:{}};t(),r.githubUserRepositories=n.exports}}(this,function(){"use strict";angular.module("github-user-repositories",[]).directive("linkListing",function(){return{scope:{linkList:"=links"},restrict:"E",replace:!0,templateUrl:"./template/link-listing.html"}}).factory("githubUserRepositoriesFactory",["$injector",function(e){var r=e.get("$log"),t=e.get("$http"),n=function(){var e=!(arguments.length<=0||void 0===arguments[0])&&arguments[0];if(!e)return!1;var r=e.headers("Link");return!!r&&(!!(r=r.split('; rel="next", <https://api.github.com/user/'))&&(r=r[1],!!r&&parseInt(r.replace(/(\w*)\/repos\?page=(\d*).*/g,"$2"),10)))},s={getAll:function(e,r){var t=n(r)||0,o=[],i=r.config.params;if(!t)return o;for(var u=i.page+1;u<=t;u++){var a=s.get(e,{per_page:i.per_page,page:u});o.push(a)}return o},get:function(e){var n=arguments.length<=1||void 0===arguments[1]?{page:1,per_page:50}:arguments[1];return new Promise(function(s,o){return r.debug("get","Username : "+e,"Page : "+n.page,"Per Page : "+n.per_page,n),t({method:"GET",url:"https://api.github.com/users/"+e+"/repos",params:n}).then(function(e){return e.status?200!==e.status?o(e):s(e):o(e)},function(e){return o(e)})})}};return s}]).controller("GithubUserRepositoriesController",["$scope","$injector",function(e,r){var t=this,n=r.get("$log"),s=r.get("githubUserRepositoriesFactory"),o=function(){return!!angular.isString(t.userName)&&t.userName.length>=1},i=function(){n.debug("resetting repositories"),t.repositories=[],t.error=""},u=function(e){return angular.isObject(e)===!1?(t.error=t.str.noResponse,n.error("checkResponse",t.str.noResponse,e),!1):200===e.status?(0===e.data.length&&(t.error=t.str.noRepos,n.debug("checkResponse",t.str.noRepos,e)),n.debug("checkResponse",200,e),!0):404===e.status?(t.error=t.str.noUser,n.debug("checkResponse",t.str.noUser,e),!1):(n.debug("checkResponse",t.str.noResponse,e),t.error=t.str.noResponse,!1)},a=function(e){return e.map(function(e){return{id:e.id,name:e.name,link:e.html_url}})},p=function(r){return n.debug("updateRepositories"+r.config.params.page,r),t.repositories=t.repositories.concat(a(r.data)),e.$digest(),t.repositories},c=function(e,r){return e!==r&&t.getRepositories().then(function(e){return n.debug("onUserNameChange.getRepositories",e)})["catch"](function(e){return n.error("onUserNameChange.failedToGetRepositories",e)})};Object.assign(t,{str:{title:"Github User Repositories",userName:"Username",usernamePlaceholder:"Please write a Github username to search",invalidUserName:"Username is not valid",noUser:"The Github user does not exist",noRepos:"Github user has no repos",noResponse:"Github API does not respond"},error:!1,userName:"",repositories:[],userNameModelOptions:{debounce:{"default":250,blur:0}},stripUserName:function(e){return!!angular.isObject(e.target)&&(!!angular.isString(e.target.value)&&void(e.target.value.indexOf(" ")>=0&&(t.userName=e.target.value.replace(/\s+/g,""))))},getRepositories:function(){return new Promise(function(r,a){return i(),o(t.userName)===!1?r(t.repositories):void s.get(t.userName).then(function(e){if(u(e)===!1)return a(e);if(p(e)===!1)return a(e);var o=s.getAll(t.userName,e);if(!o.length)return r(t.repositories);var i=o.map(function(r){r.then(function(e){n.debug("subPage"+e.config.params.page,e),u(e)&&p(e)})["catch"](function(r){n.error("subPage",r),u(e)})});return Promise.all(i)})["catch"](function(r){u(r),e.$digest(),a(r)}).then(function(){r(t.repositories)})["catch"](a)})}}),e.$watch(function(){return t.userName},c)}])})});
//# sourceMappingURL=data:application/json;base64,
